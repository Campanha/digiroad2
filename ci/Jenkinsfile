import java.net.URI
def get_environment() {
    //if (env.BRANCH_NAME.startsWith("master")) { return "Staging" }
    return "staging"
}

def get_pollSCM_trigger() {
    if (env.BRANCH_NAME.equals("master")) { return "* * * * *" }
    return ""
}

pipeline {
    agent any
    environment {
        NOTIFY_SLACK_SUBJECT = "${JOB_NAME} - <${RUN_DISPLAY_URL}|${BUILD_DISPLAY_NAME}>"
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: "25"))
        disableConcurrentBuilds()
    }
    triggers {
        pollSCM(get_pollSCM_trigger())
    }
    stages {
        stage("Setup") {
            when {
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                withCredentials([file(credentialsId: 'ssh_config', variable: 'SSH_CONFIG'), file(credentialsId: 'SSH_KNOWN_HOSTS', variable: 'KNOWN_HOSTS')]) {
                    script {

                        STAGE_FRONTEND_BUILD_CMD = [
                            "mkdir tmp",
                            "npm install",
                            "export TMPDIR=/home/jenkins/tmp",
                            "yarn install",
                            "grunt deploy --target=${get_environment()?.trim()}",
                            "cp -r /data1/jenkins/workspace/oth/Deploy-Staging/dist /home/jenkins/package/oth-UI/",
                            "cp -r /data1/jenkins/workspace/oth/Deploy-Staging/node_modules /home/jenkins/package/oth-UI/",
                            "cd /home/jenkins/package/oth-UI"
                        ].join(" && ")

                        STAGE_FRONTEND_TEST_CMD = [
                            "grunt test"
                        ].join(" && ")
                        def sbt_proxy = new URI(http_proxy)

                        def java_opts = [
                            "-Dhttp.proxyHost=${sbt_proxy.getHost()}",
                            "-Dhttp.proxyPort=${sbt_proxy.getPort()}",
                            "-Dhttp.nonProxyHosts=*.vally.local",
                            "-DproxySet=true"
                        ].join(" ")

                        STAGE_BACKEND_BUILD_CMD = [
                            "./sbt $java_opts -Ddigiroad2.env=${get_environment()?.trim()} assembly",
                            "cp -r /data1/jenkins/workspace/oth/Deploy-Staging/target/scala-2.11/oth-assembly-0.1.0-SNAPSHOT.jar /home/jenkins/package/"
                        ].join(" && ")

                        STAGE_PACKAGE_CMD = [
                            "cd /home/jenkins/package/",
                            "jar -cvf oth-assembly-0.1.0.war *"
                        ].join(" && ")

                        STAGE_PUBLISH_CMD = [
                            "mvn deploy:deploy-file",
                            "-DgroupId=fi.liikennevirasto.oth",
                            "-DartifactId=oth-staging",
                            "-Dversion=1.0.0",
                            "-DgeneratePom=true",
                            "-Dpackaging=war",
                            "-DrepositoryId=nexus3",
                            "-Durl=http://livibuild04.vally.local/nexus/repository/oth/",
                            "-Dfile=/home/jenkins/package/oth-assembly-0.1.0.war",
                            "-q",
                            "--batch-mode"
                        ].join(" ")

                        STAGE_DEPLOY_CMD = [
                            "cd /data1/jenkins/workspace/oth/Deploy-Staging@tmp/",
                            "ls -l",
                            "cd /data1/jenkins/workspace/oth/Deploy-Staging@tmp/secretFiles/",
                            "ls -l",
                            "cd /home/jenkins/",
                            "mkdir /home/jenkins/.ssh/",
                            "cp ${SSH_CONFIG} /home/jenkins/.ssh/",
                            "cp ${KNOWN_HOSTS} /home/jenkins/.ssh/",
                            "bundle exec cap staging deploy"
                        ].join(" && ")
                    }
                }
            }
        }
        stage("Prepare") {
            when {
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                sh "cp /data1/ci/maven/* ci/config/"
                script {

                    echo "Running publish... (skipped for now) "

                    def jenkins_uid = sh(returnStdout: true, script: "id -u").trim()
                    def build_args = [
                        "--build-arg http_proxy=${http_proxy}",
                        "--build-arg https_proxy=${http_proxy}",
                        "--build-arg no_proxy=${no_proxy}",
                        "--build-arg JENKINS_UID=${jenkins_uid}"
                    ].join(" ")
                    docker.build(
                        "oth-frontend-node",
                        "${build_args} -f ci/Dockerfile.node ci"
                    )
                    docker.build(
                        "oth-backend-sbt",
                        "${build_args} -f ci/Dockerfile.sbt ci"
                    )
                    docker.build(
                        "oth-maven-publish",
                        "${build_args} -f ci/Dockerfile.maven ci"
                    )
                    docker.build(
                        "oth-capistrano",
                        "${build_args} -f ci/Dockerfile.ruby ci"
                     )
                }
            }
            //post {
            //    failure {
                    //slackSend(
                    //    color: "danger",
                    //    message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} failure! Check <${BUILD_URL}console|console>!"
                    //)
            //    }
            //}
        }
        stage("Build: Frontend") {
            agent {
                docker {
                    image "oth-frontend-node"
                    reuseNode true
                    args "-v oth-package-${get_environment()?.trim()}:/home/jenkins/package"
                }
            }
            when {
                beforeAgent true
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                sh STAGE_FRONTEND_BUILD_CMD
                //echo "Running frontend build... (skipped for now)"
            }
            //post {
            //    failure {
                    //slackSend(
                    //    color: "danger",
                    //    message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} failure! Check <${BUILD_URL}console|console>!"
                    //)
            //    }
            //}
        }
		stage("Build: Backend") {
            agent {
                docker {
                    image "oth-backend-sbt"
                    reuseNode true
                    args "-v oth-package-${get_environment()?.trim()}:/home/jenkins/package"
                }
            }
            when {
                beforeAgent true
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                sh STAGE_BACKEND_BUILD_CMD
            }
            //post {
            //    failure {
                    //slackSend(
                    //    color: "danger",
                    //    message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} failure! Check <${BUILD_URL}console|console>!"
                    //)
            //    }
            //}
        }
        stage("Package & Publish") {
            agent {
                docker {
                    image "oth-maven-publish"
                    reuseNode true
                    args "-v oth-package-${get_environment()?.trim()}:/home/jenkins/package"
                }
            }
            when {
                beforeAgent true
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                sh STAGE_PACKAGE_CMD
                sh STAGE_PUBLISH_CMD
				//echo "Running publish... (skipped for now)"
            }
            //post {
            //    failure {
                    //slackSend(
                    //    color: "danger",
                    //    message: "${NOTIFY_SLACK_SUBJECT} - Stage ${STAGE_NAME} failure!\nCheck <${BUILD_URL}console|console>!"
                    //)
            //    }
            //}
        }
       stage("Deploy") {
            agent {
                docker {
                    image "oth-capistrano"
                    reuseNode true
                    args "-v oth-package-${get_environment()?.trim()}:/home/jenkins/package"
                }
            }
            when {
                beforeAgent true
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                //withCredentials([sshUserPrivateKey(credentialsId: 'gateway', keyFileVariable: 'gateway', passphraseVariable: '', usernameVariable: '')]) {
                //    sh '''
                //        ifconfig
                //    '''
                    sh STAGE_DEPLOY_CMD
                //}
				//echo "Running deploy... (skipped for now)"
				//sh "ssh 172.17.204.46"
            }
            //post {
            //    failure {
                    //slackSend(
                    //    color: "danger",
                    //    message: "${NOTIFY_SLACK_SUBJECT} - Stage ${STAGE_NAME} failure!\nCheck <${BUILD_URL}console|console>!"
                    //)
            //    }
            //}
        }
    }
    post {
        always {
            //slackSend(
            //    color: currentBuild.currentResult.equals("SUCCESS") ? "good" : "danger",
            //    message: "${NOTIFY_SLACK_SUBJECT}\nJob ${currentBuild.currentResult}! More info <${BUILD_URL}|here>."
            //)
            deleteDir()
        }
    }
}