import java.net.URI

pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: "25"))
        disableConcurrentBuilds()
    }

    stages {
        stage("Setup") {
            steps {
                    withCredentials([
                       string(credentialsId: 'TN_ITS_CONVERSION', variable: 'TN_ITS_CONVERSION')]) {
                            script {
                                STAGE_RUN_ROSATTE_CONVERSION = [
                                    "mkdir -p ${WORKSPACE}/dev/fd/3/ &&",
                                    "curl -s -v -X POST \ https://${TN_ITS_CONVERSION}:${TN_ITS_CONVERSION}@tn-its.herokuapp.com/conversion
                                ].join(" ")
                            }
                    }
            }
        }

        stage("Prepare") {
            steps {
                script {

                    def jenkins_uid = sh(returnStdout: true, script: "id -u").trim()

                    def build_args = [
                        "--build-arg http_proxy=${http_proxy}",
                        "--build-arg https_proxy=${http_proxy}",
                        "--build-arg no_proxy=${no_proxy}",
                        "--build-arg JENKINS_UID=${jenkins_uid}"
                    ].join(" ")

                    docker.build(
                        "digiroad2-backend-sbt",
                        "${build_args} -f ci/docker/Dockerfile.sbt ci"
                    )
                }
            }
        }

        stage("Run Rosatte Conversion") {
            agent {
                docker {
                    image "digiroad2-backend-sbt"
                    reuseNode true
                }
            }
            steps {
                sh STAGE_RUN_ROSATTE_CONVERSION
            }
        }
    }

    post {
        always {
            deleteDir()
        }
    }
}